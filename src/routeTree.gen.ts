/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as LineAppImport } from './routes/line-app'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as ForbiddenImport } from './routes/Forbidden'
import { Route as IndexImport } from './routes/index'
import { Route as AuthenticatedVehicleImport } from './routes/_authenticated/vehicle'
import { Route as AuthenticatedSaffImport } from './routes/_authenticated/saff'
import { Route as AuthenticatedResidentsImport } from './routes/_authenticated/residents'
import { Route as AuthenticatedDashboardImport } from './routes/_authenticated/dashboard'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LineAppRoute = LineAppImport.update({
  id: '/line-app',
  path: '/line-app',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const ForbiddenRoute = ForbiddenImport.update({
  id: '/Forbidden',
  path: '/Forbidden',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedVehicleRoute = AuthenticatedVehicleImport.update({
  id: '/vehicle',
  path: '/vehicle',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedSaffRoute = AuthenticatedSaffImport.update({
  id: '/saff',
  path: '/saff',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedResidentsRoute = AuthenticatedResidentsImport.update({
  id: '/residents',
  path: '/residents',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedDashboardRoute = AuthenticatedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Forbidden': {
      id: '/Forbidden'
      path: '/Forbidden'
      fullPath: '/Forbidden'
      preLoaderRoute: typeof ForbiddenImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/line-app': {
      id: '/line-app'
      path: '/line-app'
      fullPath: '/line-app'
      preLoaderRoute: typeof LineAppImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/residents': {
      id: '/_authenticated/residents'
      path: '/residents'
      fullPath: '/residents'
      preLoaderRoute: typeof AuthenticatedResidentsImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/saff': {
      id: '/_authenticated/saff'
      path: '/saff'
      fullPath: '/saff'
      preLoaderRoute: typeof AuthenticatedSaffImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/vehicle': {
      id: '/_authenticated/vehicle'
      path: '/vehicle'
      fullPath: '/vehicle'
      preLoaderRoute: typeof AuthenticatedVehicleImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedResidentsRoute: typeof AuthenticatedResidentsRoute
  AuthenticatedSaffRoute: typeof AuthenticatedSaffRoute
  AuthenticatedVehicleRoute: typeof AuthenticatedVehicleRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedResidentsRoute: AuthenticatedResidentsRoute,
  AuthenticatedSaffRoute: AuthenticatedSaffRoute,
  AuthenticatedVehicleRoute: AuthenticatedVehicleRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Forbidden': typeof ForbiddenRoute
  '': typeof AuthenticatedRouteWithChildren
  '/line-app': typeof LineAppRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/residents': typeof AuthenticatedResidentsRoute
  '/saff': typeof AuthenticatedSaffRoute
  '/vehicle': typeof AuthenticatedVehicleRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Forbidden': typeof ForbiddenRoute
  '': typeof AuthenticatedRouteWithChildren
  '/line-app': typeof LineAppRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/residents': typeof AuthenticatedResidentsRoute
  '/saff': typeof AuthenticatedSaffRoute
  '/vehicle': typeof AuthenticatedVehicleRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Forbidden': typeof ForbiddenRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/line-app': typeof LineAppRoute
  '/login': typeof LoginRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/residents': typeof AuthenticatedResidentsRoute
  '/_authenticated/saff': typeof AuthenticatedSaffRoute
  '/_authenticated/vehicle': typeof AuthenticatedVehicleRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Forbidden'
    | ''
    | '/line-app'
    | '/login'
    | '/dashboard'
    | '/residents'
    | '/saff'
    | '/vehicle'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Forbidden'
    | ''
    | '/line-app'
    | '/login'
    | '/dashboard'
    | '/residents'
    | '/saff'
    | '/vehicle'
  id:
    | '__root__'
    | '/'
    | '/Forbidden'
    | '/_authenticated'
    | '/line-app'
    | '/login'
    | '/_authenticated/dashboard'
    | '/_authenticated/residents'
    | '/_authenticated/saff'
    | '/_authenticated/vehicle'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ForbiddenRoute: typeof ForbiddenRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LineAppRoute: typeof LineAppRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ForbiddenRoute: ForbiddenRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LineAppRoute: LineAppRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Forbidden",
        "/_authenticated",
        "/line-app",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Forbidden": {
      "filePath": "Forbidden.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.ts",
      "children": [
        "/_authenticated/dashboard",
        "/_authenticated/residents",
        "/_authenticated/saff",
        "/_authenticated/vehicle"
      ]
    },
    "/line-app": {
      "filePath": "line-app.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_authenticated/dashboard": {
      "filePath": "_authenticated/dashboard.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/residents": {
      "filePath": "_authenticated/residents.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/saff": {
      "filePath": "_authenticated/saff.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/vehicle": {
      "filePath": "_authenticated/vehicle.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */

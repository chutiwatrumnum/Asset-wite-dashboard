/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LineAppRouteImport } from './routes/line-app'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as ForbiddenRouteImport } from './routes/Forbidden'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedVehiclesRouteImport } from './routes/_authenticated/vehicles'
import { Route as AuthenticatedVehicleAccessRouteImport } from './routes/_authenticated/vehicle-access'
import { Route as AuthenticatedSaffRouteImport } from './routes/_authenticated/saff'
import { Route as AuthenticatedResidentsRouteImport } from './routes/_authenticated/residents'
import { Route as AuthenticatedInvitationsRouteImport } from './routes/_authenticated/invitations'
import { Route as AuthenticatedExternalVehiclesRouteImport } from './routes/_authenticated/external-vehicles'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LineAppRoute = LineAppRouteImport.update({
  id: '/line-app',
  path: '/line-app',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const ForbiddenRoute = ForbiddenRouteImport.update({
  id: '/Forbidden',
  path: '/Forbidden',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedVehiclesRoute = AuthenticatedVehiclesRouteImport.update({
  id: '/vehicles',
  path: '/vehicles',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedVehicleAccessRoute =
  AuthenticatedVehicleAccessRouteImport.update({
    id: '/vehicle-access',
    path: '/vehicle-access',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedSaffRoute = AuthenticatedSaffRouteImport.update({
  id: '/saff',
  path: '/saff',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedResidentsRoute = AuthenticatedResidentsRouteImport.update({
  id: '/residents',
  path: '/residents',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedInvitationsRoute =
  AuthenticatedInvitationsRouteImport.update({
    id: '/invitations',
    path: '/invitations',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedExternalVehiclesRoute =
  AuthenticatedExternalVehiclesRouteImport.update({
    id: '/external-vehicles',
    path: '/external-vehicles',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Forbidden': typeof ForbiddenRoute
  '/line-app': typeof LineAppRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/external-vehicles': typeof AuthenticatedExternalVehiclesRoute
  '/invitations': typeof AuthenticatedInvitationsRoute
  '/residents': typeof AuthenticatedResidentsRoute
  '/saff': typeof AuthenticatedSaffRoute
  '/vehicle-access': typeof AuthenticatedVehicleAccessRoute
  '/vehicles': typeof AuthenticatedVehiclesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Forbidden': typeof ForbiddenRoute
  '/line-app': typeof LineAppRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/external-vehicles': typeof AuthenticatedExternalVehiclesRoute
  '/invitations': typeof AuthenticatedInvitationsRoute
  '/residents': typeof AuthenticatedResidentsRoute
  '/saff': typeof AuthenticatedSaffRoute
  '/vehicle-access': typeof AuthenticatedVehicleAccessRoute
  '/vehicles': typeof AuthenticatedVehiclesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/Forbidden': typeof ForbiddenRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/line-app': typeof LineAppRoute
  '/login': typeof LoginRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/external-vehicles': typeof AuthenticatedExternalVehiclesRoute
  '/_authenticated/invitations': typeof AuthenticatedInvitationsRoute
  '/_authenticated/residents': typeof AuthenticatedResidentsRoute
  '/_authenticated/saff': typeof AuthenticatedSaffRoute
  '/_authenticated/vehicle-access': typeof AuthenticatedVehicleAccessRoute
  '/_authenticated/vehicles': typeof AuthenticatedVehiclesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Forbidden'
    | '/line-app'
    | '/login'
    | '/dashboard'
    | '/external-vehicles'
    | '/invitations'
    | '/residents'
    | '/saff'
    | '/vehicle-access'
    | '/vehicles'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Forbidden'
    | '/line-app'
    | '/login'
    | '/dashboard'
    | '/external-vehicles'
    | '/invitations'
    | '/residents'
    | '/saff'
    | '/vehicle-access'
    | '/vehicles'
  id:
    | '__root__'
    | '/'
    | '/Forbidden'
    | '/_authenticated'
    | '/line-app'
    | '/login'
    | '/_authenticated/dashboard'
    | '/_authenticated/external-vehicles'
    | '/_authenticated/invitations'
    | '/_authenticated/residents'
    | '/_authenticated/saff'
    | '/_authenticated/vehicle-access'
    | '/_authenticated/vehicles'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ForbiddenRoute: typeof ForbiddenRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LineAppRoute: typeof LineAppRoute
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/line-app': {
      id: '/line-app'
      path: '/line-app'
      fullPath: '/line-app'
      preLoaderRoute: typeof LineAppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Forbidden': {
      id: '/Forbidden'
      path: '/Forbidden'
      fullPath: '/Forbidden'
      preLoaderRoute: typeof ForbiddenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/vehicles': {
      id: '/_authenticated/vehicles'
      path: '/vehicles'
      fullPath: '/vehicles'
      preLoaderRoute: typeof AuthenticatedVehiclesRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/vehicle-access': {
      id: '/_authenticated/vehicle-access'
      path: '/vehicle-access'
      fullPath: '/vehicle-access'
      preLoaderRoute: typeof AuthenticatedVehicleAccessRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/saff': {
      id: '/_authenticated/saff'
      path: '/saff'
      fullPath: '/saff'
      preLoaderRoute: typeof AuthenticatedSaffRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/residents': {
      id: '/_authenticated/residents'
      path: '/residents'
      fullPath: '/residents'
      preLoaderRoute: typeof AuthenticatedResidentsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/invitations': {
      id: '/_authenticated/invitations'
      path: '/invitations'
      fullPath: '/invitations'
      preLoaderRoute: typeof AuthenticatedInvitationsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/external-vehicles': {
      id: '/_authenticated/external-vehicles'
      path: '/external-vehicles'
      fullPath: '/external-vehicles'
      preLoaderRoute: typeof AuthenticatedExternalVehiclesRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedExternalVehiclesRoute: typeof AuthenticatedExternalVehiclesRoute
  AuthenticatedInvitationsRoute: typeof AuthenticatedInvitationsRoute
  AuthenticatedResidentsRoute: typeof AuthenticatedResidentsRoute
  AuthenticatedSaffRoute: typeof AuthenticatedSaffRoute
  AuthenticatedVehicleAccessRoute: typeof AuthenticatedVehicleAccessRoute
  AuthenticatedVehiclesRoute: typeof AuthenticatedVehiclesRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedExternalVehiclesRoute: AuthenticatedExternalVehiclesRoute,
  AuthenticatedInvitationsRoute: AuthenticatedInvitationsRoute,
  AuthenticatedResidentsRoute: AuthenticatedResidentsRoute,
  AuthenticatedSaffRoute: AuthenticatedSaffRoute,
  AuthenticatedVehicleAccessRoute: AuthenticatedVehicleAccessRoute,
  AuthenticatedVehiclesRoute: AuthenticatedVehiclesRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ForbiddenRoute: ForbiddenRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LineAppRoute: LineAppRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

// src/react-query/login/external-login.ts - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ encryptStorage
import { useMutation } from "@tanstack/react-query";
import { encryptStorage } from "@/utils/encryptStorage";
import { externalLogin, getProjectConfig, ExternalLoginRequest } from "@/api/external-auth/external-auth";
import Pb from "@/api/pocketbase";

export interface ExternalAuthResponse {
    accessToken: string;
    vmsUrl: string;
    vmsToken: string;
    projectInfo: {
        myProjectId: string;
        projectName: string;
        roleName: string;
    };
}

export const useExternalLoginMutation = () => {
    const mutation = useMutation<ExternalAuthResponse, Error, ExternalLoginRequest>({
        mutationFn: async (authReq: ExternalLoginRequest) => {
            try {
                console.log('üîê Starting external login...');
                const loginResponse = await externalLogin(authReq);

                if (!loginResponse.access_token) {
                    throw new Error('No access token received from external system');
                }

                console.log('üìÅ Getting project configuration...');
                const projectResponse = await getProjectConfig(loginResponse.access_token);

                if (!projectResponse.data?.vmsUrl || !projectResponse.data?.vmsToken) {
                    throw new Error('Invalid project configuration received');
                }

                const { vmsUrl, vmsToken, myProjectId, projectName, roleName } = projectResponse.data;

                console.log('üîÑ Configuring VMS PocketBase...');
                console.log('VMS Data:', { vmsUrl, myProjectId, projectName, roleName });

                return {
                    accessToken: loginResponse.access_token,
                    vmsUrl,
                    vmsToken,
                    projectInfo: {
                        myProjectId,
                        projectName,
                        roleName
                    }
                };

            } catch (error) {
                console.error('‚ùå External login failed:', error);
                throw error;
            }
        },
      onSuccess: async (data) => {
  console.log("=== External Login Success ===");
  console.log("Full response:", data);

  try {
    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ localStorage ‡∏Å‡πà‡∏≠‡∏ô
    localStorage.setItem("isLogged", "true");
    localStorage.setItem("loginMethod", "external");
    localStorage.setItem("role", data.projectInfo.roleName || "guest");

    console.log("‚úÖ LocalStorage set:", {
      isLogged: localStorage.getItem("isLogged"),
      loginMethod: localStorage.getItem("loginMethod"),
      role: localStorage.getItem("role"),
    });

    // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• external auth ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    try {
      encryptStorage.setItem("externalAuth", {
        accessToken: data.accessToken,
        vmsUrl: data.vmsUrl,
        vmsToken: data.vmsToken,
        projectInfo: data.projectInfo,
        loginTime: new Date().toISOString()
      });
      console.log("‚úÖ External auth saved to encrypted storage");
    } catch (storageError) {
      console.warn("‚ö†Ô∏è Could not save to encrypted storage:", storageError);
    }

    // ‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ VMS mode ‡∏Å‡πà‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á mock user)
    try {
      Pb.switchToVMS(data.vmsUrl, data.vmsToken, data.projectInfo);
      console.log("‚úÖ Switched to VMS mode");
    } catch (switchError) {
      console.error("‚ùå Error switching to VMS:", switchError);
      throw switchError;
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å VMS API (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô await)
    const userRecord = await fetchUserData();
    
    if (userRecord) {
      console.log("üéâ External login complete with real data");
      console.log("Final house_id:", userRecord.house_id);
      
      // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ authStore ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
      Pb.authStore.save(data.vmsToken, userRecord);
      
      console.log("‚úÖ Auth setup complete, ready for redirect");
    } else {
      console.warn("‚ö†Ô∏è Could not fetch user data, using minimal setup");
      
      // ‚úÖ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö login
      const minimalUser = {
        id: `external-user`,
        email: `${data.projectInfo.roleName}@vms.local`,
        role: data.projectInfo.roleName,
        first_name: data.projectInfo.projectName || "VMS",
        last_name: "User",
        house_id: "", // ‚úÖ ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        isExternal: true,
        projectInfo: data.projectInfo,
      };
      
      Pb.authStore.save(data.vmsToken, minimalUser);
      console.log("‚úÖ Minimal auth setup complete");
    }

    console.log("‚úÖ External login setup complete");

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏£‡∏¥‡∏á (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô async function)
    async function fetchUserData() {
      try {
        console.log("üîç Fetching real user data from VMS...");
        
        // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏£‡∏¥‡∏á
        const userResponse = await fetch(`${data.vmsUrl}/api/collections/admin/records`, {
          method: 'GET',
          headers: {
            'Authorization': data.vmsToken,
            'Accept': 'application/json',
          },
        });

        if (userResponse.ok) {
          const userData = await userResponse.json();
          console.log("üìã User data from VMS:", userData);

          // ‚úÖ ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö role ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          let currentUserRecord = null;
          
          if (userData.items && userData.items.length > 0) {
            // ‡∏•‡∏≠‡∏á‡∏´‡∏≤ user ‡∏ó‡∏µ‡πà‡∏°‡∏µ role ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            currentUserRecord = userData.items.find((user: any) => 
              user.role === data.projectInfo.roleName
            ) || userData.items[0]; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
          }

          if (currentUserRecord) {
            console.log("‚úÖ Found user record:", currentUserRecord);

            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏£‡∏¥‡∏á
            const realUserRecord = {
              ...currentUserRecord,
              isExternal: true,
              projectInfo: data.projectInfo,
              vmsUrl: data.vmsUrl,
              vmsToken: data.vmsToken,
            };

            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á storage
            try {
              encryptStorage.setItem("user", realUserRecord);
              console.log("‚úÖ Real user record saved");
            } catch (storageError) {
              console.warn("‚ö†Ô∏è Could not save user record:", storageError);
            }

            console.log("‚úÖ Real user data setup complete");
            console.log("House ID:", realUserRecord.house_id);
            
            return realUserRecord;
          } else {
            console.warn("‚ö†Ô∏è No user record found in VMS response");
          }
        } else {
          console.warn("‚ö†Ô∏è Failed to fetch user data from VMS:", userResponse.status);
        }
      } catch (fetchError) {
        console.error("‚ùå Error fetching user data:", fetchError);
      }

      return null;
    }

  } catch (error) {
    console.error("‚ùå Error in onSuccess handler:", error);
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ error
    this.onError(error as Error);
    throw error;
  }
},
        onError: (error) => {
            console.error("‚ùå External login error:", error);

            // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ error ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            try {
                Pb.switchToDefault();
            } catch (switchError) {
                console.error("Error switching back to default:", switchError);
            }

            // ‡∏•‡πâ‡∏≤‡∏á localStorage
            localStorage.removeItem("isLogged");
            localStorage.removeItem("loginMethod");
            localStorage.removeItem("role");

            // ‡∏•‡πâ‡∏≤‡∏á encryptStorage ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            try {
                encryptStorage.removeItem("externalAuth");
                encryptStorage.removeItem("user");
                encryptStorage.removeItem("vmsConfig");
            } catch (storageError) {
                console.warn("Warning: Could not clear encrypted storage:", storageError);
            }
        }
    });

    return mutation;
};